// Write a function solution that, given an integer N, returns a string of length N containing as many different lower-case letters ('a'-'z') as possible, in which each letter occurs an equal number of times.

// Examples:

// 1. Given N = 3, the function may return "fig", "pea", "nut", etc. Each of these strings contains three different letters with the same number of occurrences.

// 2. Given N = 5, the function may return "mango", "grape", "melon", etc.

// 3. Given N = 30, the function may return "aabbcc...oo" (each letter from 'a' to 'o' occurs twice). The string contains 15 different letters.

// Write an efficient algorithm for the following assumptions:

// N is an integer within the range [1..200,000].


def solution(N):
    import string
    letters = string.ascii_lowercase  # 'abcdefghijklmnopqrstuvwxyz'
    num_letters = len(letters)  # 26
    
    # Calculate the number of full sets of the alphabet
    full_sets = N // num_letters
    remainder = N % num_letters
    
    # Build the resulting string
    result = letters * full_sets + letters[:remainder]
    
    return result
